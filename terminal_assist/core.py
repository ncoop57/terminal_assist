# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['LIB_PATH', 'TerminalAssistant']

# %% ../nbs/00_core.ipynb 2
import terminal_assist

from langchain.chat_models import ChatOpenAI
from langchain.schema import (
    AIMessage,
    HumanMessage,
    SystemMessage
)
from rich.panel import Panel
from rich.text import Text
from textual.app import App, ComposeResult
from textual.containers import Container
from textual.widgets import Footer, Header, Input, TextLog

# %% ../nbs/00_core.ipynb 4
LIB_PATH = terminal_assist.__path__[0]

# %% ../nbs/00_core.ipynb 5
class TerminalAssistant(App):
    """A Textual app gives you a personal assistant in your terminal."""

    BINDINGS = [("d", "toggle_dark", "Toggle dark mode")]
    CSS_PATH = LIB_PATH + "/style/style.css"
    messages = [SystemMessage(content="You are a helpful assistant that helps a user with tasks in their terminal.")]
    chatbot = ChatOpenAI(temperature=0)

    def compose(self) -> ComposeResult:
        """Create child widgets for the app."""
        yield Header()
        yield TextLog(highlight=True, markup=True)
        yield Input()
        yield Footer()

    def on_ready(self) -> None:
        """Called  when the DOM is ready."""
        text_log = self.query_one(TextLog)

        # text_log.write(Syntax(CODE, "python", indent_guides=True))
        text_log.write("[bold magenta]Write text or any Rich renderable!")
    
    def on_input_submitted(self, message: Input.Submitted) -> None:
        """Called when the user submits input."""
        text = message.value
        self.messages.append(HumanMessage(content=text))
        text_log = self.query_one(TextLog)
        text_log.write(text)
        res = self.chatbot(self.messages)
        self.messages.append(res)
        text_log.write(f"[bold magenta]{res.content}")

        input = self.query_one(Input)
        input.value = ""

    def action_toggle_dark(self) -> None:
        """An action to toggle dark mode."""
        self.dark = not self.dark
